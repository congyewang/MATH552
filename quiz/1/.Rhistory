df_2_1 <- select(df, -one_of(vars))
df_2_2 <- filter(df_2_1, (Type.of.Vehicle == 9) & (X1st.Road.Class != 1))
# Print Dimensions
nrow(df_2_2)
ncol(df_2_2)
dim(df_2_2)
# Screen Data
vars <- c("Accident.Date", "Time..24hr.", "Road.Surface", "Lighting.Conditions",
"Weather.Conditions")
df_2_1 <- select(df, -one_of(vars))
df_2_2 <- filter(df_2_1, (Type.of.Vehicle == 9) & (X1st.Road.Class != 1))
# Print Dimensions
nrow(df_2_2)
ncol(df_2_2)
dim(df_2_2)
# Distance Calculation Function
distance_calculate <- function(a, b) {
return(sqrt((a - 429967)^2 + (b - 434260)^2))
}
# Add the Distance of the Accident from the Centre of Leeds in Metres to the Accident Data Frame
df.distance.of.accident <- distance_calculate(df$Grid.Ref..Easting,
df$Grid.Ref..Northing)
df <- mutate(df, Distance.of.Accident = df.distance.of.accident)
# Using the Modified Data from Question 2
df_3 <- mutate(df_2_2, Distance.of.Accident = distance_calculate(df_2_2$Grid.Ref..Easting, df_2_2$Grid.Ref..Northing))
df_3 <- arrange(df_3, df_3$Distance.of.Accident)
tail(df_3)
# Plot Histogram
qplot(x=Age.of.Casualty, data=df_3, geom="histogram", binwidth = 10)
install.packages("digest")
# Plot Histogram
qplot(x=Age.of.Casualty, data=df_3, geom="histogram", binwidth = 10)
# Distance Calculation Function
distance_calculate <- function(a, b) {
return(sqrt((a - 429967)^2 + (b - 434260)^2))
}
# Add the Distance of the Accident from the Centre of Leeds in Metres to the Accident Data Frame
df.distance.of.accident <- distance_calculate(df$Grid.Ref..Easting,
df$Grid.Ref..Northing)
df <- mutate(df, Distance.of.Accident = df.distance.of.accident)
# Using the Modified Data from Question 2
df_3 <- mutate(df_2_2, Distance.of.Accident = distance_calculate(df_2_2$Grid.Ref..Easting, df_2_2$Grid.Ref..Northing))
df_3 <- arrange(df_3, df_3$Distance.of.Accident)
tail(df_3)
# Import Packages
library(tidyverse)
# Load Data
df <- read.csv("./accidents2014.csv", header = TRUE)
t1 <- data.frame(
Variable = c("Reference.Number", "Grid.Ref..Easting", "Grid.Ref..Northing",
"Number.of.Vehicles","Number.of.Casualties", "Accident.Date", "Time..24hr.",
"X1st.Road.Class", "Road.Surface", "Lighting.Conditions", "Weather.Conditions",
"Casualty.Class", "Casualty.Severity", "Sex.of.Casualty", "Age.of.Casualty",
"Type.of.Vehicle"),
Description = c("Reference number of accident", "East(-west) grid reference for accident",
"North(-south) grid reference for accident", "Number of vehicles involved in the accident",
"Number of casualties as a result of the accident", "Date of accident",
"Time of accident on the 24 hour clock",
"Class of road (details given in accidentguidance.csv)",
"Road surface conditions (details given in accidentguidance.csv)",
"Lighting conditions (details given in accidentguidance.csv)",
"Weather conditions (details given in accidentguidance.csv)",
"Class of casualty (details given in accidentguidance.csv)",
"Severity of casualty (details given in accidentguidance.csv)",
"Sex of casualty (1 - Male; 2 - Female)", "Age of casualty (in years)",
"Type of vehicle (details given in accidentguidance.csv)")
)
# Check Headers
df_headers_names <- sort(names(df))
std_headers_names <- sort(t1$Variable)
for (i in 1:length(df_headers_names)) {
if (df_headers_names[i] != std_headers_names[i]) {
print(paste("False", "No.", i, "\n"))
}
else {
next
}
}
# Print Dimensions
nrow(df)
ncol(df)
dim(df)
# Screen Data
vars <- c("Accident.Date", "Time..24hr.", "Road.Surface", "Lighting.Conditions",
"Weather.Conditions")
df_2_1 <- select(df, -one_of(vars))
df_2_2 <- filter(df_2_1, (Type.of.Vehicle == 9) & (X1st.Road.Class != 1))
# Print Dimensions
nrow(df_2_2)
ncol(df_2_2)
dim(df_2_2)
# Distance Calculation Function
distance_calculate <- function(a, b) {
return(sqrt((a - 429967)^2 + (b - 434260)^2))
}
# Add the Distance of the Accident from the Centre of Leeds in Metres to the Accident Data Frame
df.distance.of.accident <- distance_calculate(df$Grid.Ref..Easting,
df$Grid.Ref..Northing)
df <- mutate(df, Distance.of.Accident = df.distance.of.accident)
# Using the Modified Data from Question 2
df_3 <- mutate(df_2_2, Distance.of.Accident = distance_calculate(df_2_2$Grid.Ref..Easting, df_2_2$Grid.Ref..Northing))
df_3 <- arrange(df_3, df_3$Distance.of.Accident)
tail(df_3)
# Plot Histogram
qplot(x=Age.of.Casualty, data=df_3, geom="histogram", binwidth = 10)
# Distance Calculation Function
distance_calculate <- function(a, b) {
return(sqrt((a - 429967)^2 + (b - 434260)^2))
}
# Add the Distance of the Accident from the Centre of Leeds in Metres to the Accident Data Frame
df.distance.of.accident <- distance_calculate(df$Grid.Ref..Easting,
df$Grid.Ref..Northing)
df <- mutate(df, Distance.of.Accident = df.distance.of.accident)
# Using the Modified Data from Question 2
df_3 <- mutate(df_2_2, Distance.of.Accident = distance_calculate(df_2_2$Grid.Ref..Easting,                                       df_2_2$Grid.Ref..Northing))
df_3 <- arrange(df_3, df_3$Distance.of.Accident)
tail(df_3)
# Distance Calculation Function
distance_calculate <- function(a, b) {
return(sqrt((a - 429967)^2 + (b - 434260)^2))
}
# Add the Distance of the Accident from the Centre of Leeds in Metres to the Accident Data Frame
df.distance.of.accident <- distance_calculate(df$Grid.Ref..Easting,
df$Grid.Ref..Northing)
df <- mutate(df, Distance.of.Accident = df.distance.of.accident)
# Using the Modified Data from Question 2
df_3 <- mutate(df_2_2, Distance.of.Accident = distance_calculate(
df_2_2$Grid.Ref..Easting,                                       df_2_2$Grid.Ref..Northing))
df_3 <- arrange(df_3, df_3$Distance.of.Accident)
tail(df_3)
# Plot Histogram
qplot(x=Age.of.Casualty, data=df_3, geom="histogram", binwidth = 10)
install.packages('devtools')
library(devtools)
install_github('andreacirilloac/updateR')
# Screen Data
vars <- c("Accident.Date", "Time..24hr.", "Road.Surface", "Lighting.Conditions",
"Weather.Conditions")
df_2_1 <- select(df, -one_of(vars))
# Import Packages
library(tidyverse)
# Load Data
df <- read.csv("./accidents2014.csv", header = TRUE)
t1 <- data.frame(
Variable = c("Reference.Number", "Grid.Ref..Easting", "Grid.Ref..Northing",
"Number.of.Vehicles","Number.of.Casualties", "Accident.Date", "Time..24hr.",
"X1st.Road.Class", "Road.Surface", "Lighting.Conditions", "Weather.Conditions",
"Casualty.Class", "Casualty.Severity", "Sex.of.Casualty", "Age.of.Casualty",
"Type.of.Vehicle"),
Description = c("Reference number of accident", "East(-west) grid reference for accident",
"North(-south) grid reference for accident", "Number of vehicles involved in the accident",
"Number of casualties as a result of the accident", "Date of accident",
"Time of accident on the 24 hour clock",
"Class of road (details given in accidentguidance.csv)",
"Road surface conditions (details given in accidentguidance.csv)",
"Lighting conditions (details given in accidentguidance.csv)",
"Weather conditions (details given in accidentguidance.csv)",
"Class of casualty (details given in accidentguidance.csv)",
"Severity of casualty (details given in accidentguidance.csv)",
"Sex of casualty (1 - Male; 2 - Female)", "Age of casualty (in years)",
"Type of vehicle (details given in accidentguidance.csv)")
)
# Check Headers
df_headers_names <- sort(names(df))
std_headers_names <- sort(t1$Variable)
for (i in 1:length(df_headers_names)) {
if (df_headers_names[i] != std_headers_names[i]) {
print(paste("False", "No.", i, "\n"))
}
else {
next
}
}
# Print Dimensions
nrow(df)
ncol(df)
dim(df)
# Screen Data
vars <- c("Accident.Date", "Time..24hr.", "Road.Surface", "Lighting.Conditions",
"Weather.Conditions")
df_2_1 <- select(df, -one_of(vars))
df_2_2 <- filter(df_2_1, (Type.of.Vehicle == 9) & (X1st.Road.Class != 1))
# Print Dimensions
nrow(df_2_2)
ncol(df_2_2)
dim(df_2_2)
library(tidyverse)
a <- c(1,2,3)
m = a
m
id(m)
vctrs::vec_group_id(m)
data.frame(a = c(1,2), b = c(3,4))
t <- data.frame(a = c(1,2), b = c(3,4))
t$c <- c(5,6)
t
# 定义概率密度函数
LL <- function(f) {
# 定义概率密度函数
desity_function <- function(params, x) {
phi <- 1
mu <- params
z <- phi^(-1) * exp(-((x - mu) / phi)) * exp(-exp(-((x - mu) / phi)))
return(z)
}
ll <- sum(log(desity_function))
return(-ll)
}
# 拟合函数
f.res <- nlminb(1, LL,
data = c(50.4, 49.7, 49.9, 51.1, 49.2, 53.4, 51.1, 49.9, 51.3, 49.6),
lower = 0.000001,
upper = Inf
)
# 拟合函数
f.res <- nlminb(1, LL,
#data = c(50.4, 49.7, 49.9, 51.1, 49.2, 53.4, 51.1, 49.9, 51.3, 49.6),
lower = 0.000001,
upper = Inf
)
trout.age <- c(10,20)
trout.pcb <- c(33,44)
method(trout)
ls(trout)
method(ls)
methods(ls)
methods(trout)
x <- c(50.4, 49.7, 49.9, 51.1, 49.2, 53.4, 51.1, 49.9, 51.3, 49.6)
sum(x)
e
E
x <- c(50.4, 49.7, 49.9, 51.1, 49.2, 53.4, 51.1, 49.9, 51.3, 49.6)
for (i in 1:10) {
y <- -sum(x) + 10*48 - exp(10)*exp(-x[i])
return(y)
}
x <- c(50.4, 49.7, 49.9, 51.1, 49.2, 53.4, 51.1, 49.9, 51.3, 49.6)
s <- 0
for (i in 1:10) {
y <- -sum(x) + 10*48 - exp(10)*exp(-x[i])
s = s + y
return(s)
}
x <- c(50.4, 49.7, 49.9, 51.1, 49.2, 53.4, 51.1, 49.9, 51.3, 49.6)
s <- 0
for (i in 1:10) {
y <- -sum(x) + 10*48 - exp(10)*exp(-x[i])
s = s + y
print(s)
}
sum(x)
log(10)
log(10) + sum(x)
exp(-50.4)
ln(10)
log(10)
# vi
sigmahat2 <- mean((x - 50.11)^2)
sigmahat2 <- sqrt(sigmahat2)
library(aod)
library("aod")
seWald
# vi
n <- length(x)
sigmahat2 <- mean((x - 50.11)^2)
sigmahat2 <- sqrt(sigmahat2)
IEsigmahat <- 2 * n / sigmahat2
seWald = 1 / sqrt(IEsigmahat)
seWald
sigmahat2 <- mean((x - 50.11)^2)
sigmahat <- sqrt(sigmahat2)
IEsigmahat <- 2 * n / sigmahat2
seWald = 1 / sqrt(IEsigmahat)
sigmahat
TestStat2 <- (sigmahat - 0.1)^2 / seWald^2
TestStat2
pvalue2=1-pchisq(TestStat2,df=1)
pvalue2
TestStat2 <- (sigmahat - 50)^2 / seWald^2
pvalue2=1-pchisq(TestStat2,df=1)
pvalue2
TestStat2 <- (sigmahat - 0.1)^2 / seWald^2
pvalue2=1-pchisq(TestStat2,df=1)
TestStat2; pvalue2
# vi
normal.sigma.score <- function(par, data){
n <- length(data)
score <- n - sum(exp(-data)) * exp(par)
return(score)
}
u0 <- normal.sigma.score(50, x)
u0
u0 <- normal.sigma.score(0.1, x)
u0
IE <- 2 * n / 0.1^2
TestStat1 <- u0^2/IE pvalue1=1-pchisq(TestStat1,df=1) TestStat1; pvalue1
IE <- 2 * n / 0.1^2
TestStat1 <- u0^2/IE
pvalue1=1-pchisq(TestStat1,df=1)
TestStat1; pvalue1
# vi
normal.sigma.score <- function(par, data){
n <- length(data)
score <- n - sum(exp(-data)) * exp(par)
return(score)
}
u0 <- normal.sigma.score(50, x)
u0
IE <- 2 * n / 0.1^2
TestStat1 <- u0^2/IE
pvalue1=1-pchisq(TestStat1,df=1)
TestStat1; pvalue1
IE <- 2 * n / 50^2
TestStat1 <- u0^2/IE
pvalue1=1-pchisq(TestStat1,df=1)
TestStat1; pvalue1
rnorm(100,2,sd=3)
print(rnorm(100,2,sd=3))
plot(rnorm(100,2,sd=3))
help("rnorm")
hist(rnorm(100,2,sd=3))
# vi
normal.sigma.score <- function(par, data){
n <- length(data)
score <- n - sum(exp(-data)) * exp(par)
return(score)
}
u0 <- normal.sigma.score(50, x)
u0
IE <- 2 * n / 50^2
TestStat1 <- u0^2/IE
pvalue1=1-pchisq(TestStat1,df=1)
TestStat1; pvalue1
# vi
n <- length(x)
sigmahat2 <- mean((x - 50.11)^2)
sigmahat <- sqrt(sigmahat2)
IEsigmahat <- 2 * n / sigmahat2
seWald = 1 / sqrt(IEsigmahat)
TestStat2 <- (sigmahat - 50)^2 / seWald^2
pvalue2=1-pchisq(TestStat2,df=1)
TestStat2; pvalue2
install.packages("aod")
library(aod)
wald.test()
help("wald.test")
data(orob2)
fm <- quasibin(cbind(y, n - y) ~ seed * root, data = orob2)
wald.test(b = coef(fm), Sigma = vcov(fm), Terms = 3:4)
b
fm
coef(fm)
vcov(fm)
################################
datab <- c(50.4, 49.7, 49.9, 51.1, 49.2, 53.4, 51.1, 49.9, 51.3, 49.6)
normal.sigma.score <- function(par,data) {
n <- length(data)
score <- n - sum(exp(-data+par))
return(score)
}
u0=normal.sigma.score(50,datab)
u0
n=length(datab)
IE=2*n/50^2
TestStat1=u0^2/IE
pvalue1=1-pchisq(TestStat1,df=1)
TestStat1; pvalue1
sigmahat2=mean((datab-50.11)^2)
sigmahat=sqrt(sigmahat2)
IEsigmahat=2*n/sigmahat2
seWald=1/sqrt(IEsigmahat)
cilo=sigmahat-1.96*seWald
cihi=sigmahat+1.96*seWald
print(c(cilo,cihi))
TestStat2=(sigmahat-3.5)^2/seWald^2
pvalue2=1-pchisq(TestStat2,df=1)
TestStat2; pvalue2
TestStat2=(sigmahat-50)^2/seWald^2
pvalue2=1-pchisq(TestStat2,df=1)
TestStat2; pvalue2
n=length(datab)
IE=2*n/50^2
TestStat1=u0^2/IE
pvalue1=1-pchisq(TestStat1,df=1)
TestStat1; pvalue1
sigmahat2=mean((datab-50.11)^2)
sigmahat=sqrt(sigmahat2)
IEsigmahat=2*n/sigmahat2
seWald=1/sqrt(IEsigmahat)
cilo=sigmahat-1.96*seWald
cihi=sigmahat+1.96*seWald
print(c(cilo,cihi))
TestStat2=(sigmahat-50)^2/seWald^2
pvalue2=1-pchisq(TestStat2,df=1)
TestStat2; pvalue2
pchisq
help(pchisq)
chisq.test(x)
chisq.test(datab)
chisq.test(datab,rep(50,length(datab)))
help("chisq.test")
rep(50,length(datab)
)
chisq.test(x=datab,y=rep(50,length(datab)))
data.frame(x=datab, y=rep(50,length(datab)))
matrix(data.frame(x=datab, y=rep(50,length(datab))))
matrix(data.frame(x=datab, y=rep(50,length(datab))), ncol=2)
matrix(x,rep(50,length(datab)))
matrix(datab,rep(50,length(datab)))
matrix(datab,rep(50,length(datab)), nrow=2)
matrix(datab,rep(50,length(datab)), ncol=2)
x <- matrix(c(12, 5, 7, 7), ncol = 2)
x
matrix(datab + rep(50,length(datab)), ncol=2)
matrix(cbind(datab + rep(50,length(datab))), ncol=2)
matrix(vbind(datab + rep(50,length(datab))), ncol=2)
rbind(datab, rep(50,length(datab))))
rbind(datab, rep(50,length(datab)))
cbind(datab, rep(50,length(datab)))
matrix(c(datab + rep(50,length(datab))), ncol=2)
matrix(c(datab, rep(50,length(datab))), ncol=2)
x <- matrix(c(datab, rep(50,length(datab))), ncol=2)
chisq.test(x)
help("wald.test")
data(orob2)
fm <- quasibin(cbind(y, n - y) ~ seed * root, data = orob2)
# Wald test for the effect of root
wald.test(b = coef(fm), Sigma = vcov(fm), Terms = 3:4)
coef(fm)
vcov(fm)
##############################################################################
datab <- c(50.4, 49.7, 49.9, 51.1, 49.2, 53.4, 51.1, 49.9, 51.3, 49.6)
normal.sigma.score <- function(par,data) {
n <- length(data)
score <- n - sum(exp(-data+par))
return(score)
}
u0=normal.sigma.score(50,datab)
u0
avg(datab)
sum(datab)/length(datab)
hist(datab)
library(tidyverse)
setwd("~/R/MATH552/quiz/")
df <- read.csv("data1.csv")
setwd("~/R/MATH552/quiz/1")
df <- read.csv("data1.csv")
df
df <- read.csv("data1.csv", header = T)
df
m <- lm(y ~ x, data = df)
summary(m)
predict.lm(df$x)
predicted(df$x)
predict(df$x)
fitted(df$x)
fitted(object = m)
fitted(m, df$x)
sum(fitted(m, df$x))
sum$df$y
sum(df$y)
t(df$x)
t(matrix(df$x))
x_t <- t(matrix(df$x))
y <- matrix(df$y)
x_t%*%y
df$x%*%y
rnorm(100, mean = 1, sd =2)
rnorm(100, mean = 1, sd =2)
y_hat <- fitted(m)
y_hat
x_t%*%y_hat
x_t%*%y
x1 <- rnorm(100, mean = 56, sd = 199)
df$x1 <- rnorm(100, mean = 56, sd = 199)
m1 <- lm(y ~ ., data = df)
summary(m1)
library(tidyverse)
X <- matrix(df$x, df$x1)
X <- matrix(df$x, df$x1, nrow = 2)
X <- matrix(df$x, df$x1, nrow = 2, ncol = 100)
X
X <- matrix(df$x, df$x1, nrow = 100, ncol = 2)
X
t(X) %*% fitted(m1)
t(X) %*% df$y
X %*% fitted(m1)
X %*% df$y
sum(fitted(m1))
sum(df$y)
setwd("~/R/MATH552/quiz/1")
df <- read.csv("data1.csv", header = T)
setwd("~/R/MATH552/quiz/1")
df <- read.csv("data1.csv", header = T)
m <- lm(y ~ x, data = df)
summary(m)
plot(df$x, df$y, type = "p")
lines(df$x, fitted(m))
df <- read.csv("data1.csv", header = T)
m <- lm(y ~ x, data = df)
summary(m)
library(tidyverse)
setwd("~/R/MATH552/quiz/1")
df <- read.csv("data1.csv", header = T)
m <- lm(y ~ x, data = df)
summary(m)
plot(df$x, df$y, type = "p")
lines(df$x, fitted(m))
setwd("~/R/MATH552/quiz/1")
df <- read.csv("data1.csv", header = T)
m <- lm(y ~ x, data = df)
summary(m)
