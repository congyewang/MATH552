lambda_iii <- seq(1, 50, length = 200)
# nlam <- length(lambda)
Pl_lambda_function <- function(lambda, data) {
z <- sum(lfactorial(data + lambda - 1))
- sum(lfactorial(data))
- sum(lfactorial(lambda - 1))
#       + log(1 - lambda / (mean(data) + lambda)) * length(data) * mean(data)
#       + length(data) * lambda * log(lambda)
#       - length(data) * lambda * log(lambda * mean(data))
+ log(1 - lambda / (mean(data)) + lambda) * sum(data)
+ length(data) * lambda * log(lambda / (mean(data) + lambda))
return(-z)
}
# plot(lambda, y_iii, type = "l", xlab = "Lambda", ylab = "Pl")
# Pl <- rep(0, length(lambda))
# for (i in 1:length(lambda)) {
#     Pl[i] = Pl_lambda_function(lambda_iii[i], caterpillars)
#}
# plot(lambda_iii, Pl, type = "l")
# Pl
set.seed(4321^2)
fit1 <- optim(2, Pl_lambda_function, method = "Brent", lower = 2, upper = 100, data = caterpillars)
fit1
lambda_iii <- seq(1, 50, length = 200)
# nlam <- length(lambda)
Pl_lambda_function <- function(lambda, data) {
z <- sum(lfactorial(data + lambda - 1))
- sum(lfactorial(data))
- sum(lfactorial(lambda - 1))
#       + log(1 - lambda / (mean(data) + lambda)) * length(data) * mean(data)
#       + length(data) * lambda * log(lambda)
#       - length(data) * lambda * log(lambda * mean(data))
+ log(1 - lambda / (mean(data)) + lambda) * sum(data)
+ length(data) * lambda * log(lambda / (mean(data) + lambda))
return(-z)
}
# plot(lambda, y_iii, type = "l", xlab = "Lambda", ylab = "Pl")
# Pl <- rep(0, length(lambda))
# for (i in 1:length(lambda)) {
#     Pl[i] = Pl_lambda_function(lambda_iii[i], caterpillars)
#}
# plot(lambda_iii, Pl, type = "l")
# Pl
set.seed(4321^2)
fit1 <- optim(2, Pl_lambda_function, method = "Brent", lower = 2, upper = 50, data = caterpillars)
fit1
ptest <- function(a, data) {
n <- length(data)
z <- n*a*log(a) - n*a*log(mean(data)) + (a-1)*sum(log(data)) - n*a - n*log(gamma(a))
return(z)
}
atest <- seq(1, 10, len=2000)
plot(atest, ptest(atest), type = "l")
plot(atest, ptest(atest,atest), type = "l")
lambda_iii <- seq(1, 50, length = 200)
# nlam <- length(lambda)
Pl_lambda_function <- function(lambda, data) {
z <- sum(lfactorial(data + lambda - 1))
- sum(lfactorial(data))
- sum(lfactorial(lambda - 1))
#       + log(1 - lambda / (mean(data) + lambda)) * length(data) * mean(data)
#       + length(data) * lambda * log(lambda)
#       - length(data) * lambda * log(lambda * mean(data))
+ log(1 - lambda / (mean(data)) + lambda) * sum(data)
+ length(data) * lambda * log(lambda / (mean(data) + lambda))
return(z)
}
lambda <- seq(2, 50, len = 2000)
plot(lambda, lambda, type = "l", xlab = "Lambda", ylab = "Pl")
# Pl <- rep(0, length(lambda))
# for (i in 1:length(lambda)) {
#     Pl[i] = Pl_lambda_function(lambda_iii[i], caterpillars)
#}
# plot(lambda_iii, Pl, type = "l")
# Pl
#set.seed(4321^2)
#fit1 <- optim(2, Pl_lambda_function, method = "Brent", lower = 2, upper = 50, data = caterpillars)
#fit1
lambda_iii <- seq(1, 50, length = 200)
# nlam <- length(lambda)
Pl_lambda_function <- function(lambda, data) {
z <- sum(lfactorial(data + lambda - 1))
- sum(lfactorial(data))
- sum(lfactorial(lambda - 1))
#       + log(1 - lambda / (mean(data) + lambda)) * length(data) * mean(data)
#       + length(data) * lambda * log(lambda)
#       - length(data) * lambda * log(lambda * mean(data))
+ log(1 - lambda / (mean(data)) + lambda) * sum(data)
+ length(data) * lambda * log(lambda / (mean(data) + lambda))
return(z)
}
lambda <- seq(2, 50, len = 2000)
plot(lambda, lambda, type = "l", xlab = "Lambda", ylab = "Pl")
# Pl <- rep(0, length(lambda))
# for (i in 1:length(lambda)) {
#     Pl[i] = Pl_lambda_function(lambda_iii[i], caterpillars)
#}
# plot(lambda_iii, Pl, type = "l")
# Pl
#set.seed(4321^2)
#fit1 <- optim(2, Pl_lambda_function, method = "Brent", lower = 2, upper = 50, data = caterpillars)
#fit1
lambda_iii <- seq(1, 50, length = 200)
# nlam <- length(lambda)
Pl_lambda_function <- function(lambda, data) {
z <- sum(lfactorial(data + lambda - 1))
- sum(lfactorial(data))
- sum(lfactorial(lambda - 1))
#       + log(1 - lambda / (mean(data) + lambda)) * length(data) * mean(data)
#       + length(data) * lambda * log(lambda)
#       - length(data) * lambda * log(lambda * mean(data))
+ log(1 - lambda / (mean(data)) + lambda) * sum(data)
+ length(data) * lambda * log(lambda / (mean(data) + lambda))
return(z)
}
lambda <- seq(2, 50, len = 2000)
plot(lambda, Pl_lambda_function(lambda, lambda), type = "l", xlab = "Lambda", ylab = "Pl")
lambda_iii <- seq(1, 50, length = 200)
# nlam <- length(lambda)
Pl_lambda_function <- function(lambda, data) {
z <- sum(lfactorial(data + lambda - 1))
- sum(lfactorial(data))
- sum(lfactorial(lambda - 1))
#       + log(1 - lambda / (mean(data) + lambda)) * length(data) * mean(data)
#       + length(data) * lambda * log(lambda)
#       - length(data) * lambda * log(lambda * mean(data))
+ log(1 - lambda / (mean(data)) + lambda) * sum(data)
+ length(data) * lambda * log(lambda / (mean(data) + lambda))
return(z)
}
Pl <- rep(0, length(lambda_iii))
for (i in 1:length(lambda)) {
Pl[i] = Pl_lambda_function(lambda_iii[i], caterpillars)
}
plot(lambda_iii, Pl, type = "l")
lambda_iii <- seq(2, 50, length = 2000)
# nlam <- length(lambda)
Pl_lambda_function <- function(lambda, data) {
z <- sum(lfactorial(data + lambda - 1))
- sum(lfactorial(data))
- sum(lfactorial(lambda - 1))
#       + log(1 - lambda / (mean(data) + lambda)) * length(data) * mean(data)
#       + length(data) * lambda * log(lambda)
#       - length(data) * lambda * log(lambda * mean(data))
+ log(1 - lambda / (mean(data)) + lambda) * sum(data)
+ length(data) * lambda * log(lambda / (mean(data) + lambda))
return(z)
}
Pl <- rep(0, length(lambda_iii))
for (i in 1:length(lambda_iii)) {
Pl[i] = Pl_lambda_function(lambda_iii[i], caterpillars)
}
plot(lambda_iii, Pl, type = "l")
# Pl
#set.seed(4321^2)
#fit1 <- optim(2, Pl_lambda_function, method = "Brent", lower = 2, upper = 50, data = caterpillars)
#fit1
lambda_iii <- seq(2, 50, length = 2000)
# nlam <- length(lambda)
Pl_lambda_function <- function(lambda, data) {
z <- sum(lfactorial(data + lambda - 1))
- sum(lfactorial(data))
- sum(lfactorial(lambda - 1))
#       + log(1 - lambda / (mean(data) + lambda)) * length(data) * mean(data)
#       + length(data) * lambda * log(lambda)
#       - length(data) * lambda * log(lambda * mean(data))
+ log(1 - lambda / (mean(data)) + lambda) * sum(data)
+ length(data) * lambda * log(lambda / (mean(data) + lambda))
return(z)
}
Pl <- rep(0, length(lambda_iii))
for (i in 1:length(lambda_iii)) {
Pl[i] = Pl_lambda_function(lambda_iii[i], lambda_iii)
}
plot(lambda_iii, Pl, type = "l")
# Pl
#set.seed(4321^2)
#fit1 <- optim(2, Pl_lambda_function, method = "Brent", lower = 2, upper = 50, data = caterpillars)
#fit1
lambda_iii <- seq(2, 50, length = 2000)
# nlam <- length(lambda)
Pl_lambda_function <- function(lambda, data) {
z <- sum(lfactorial(data + lambda - 1))
- sum(lfactorial(data))
- sum(lfactorial(lambda - 1))
#       + log(1 - lambda / (mean(data) + lambda)) * length(data) * mean(data)
#       + length(data) * lambda * log(lambda)
#       - length(data) * lambda * log(lambda * mean(data))
+ log(1 - lambda / (mean(data)) + lambda) * sum(data)
+ length(data) * lambda * log(lambda / (mean(data) + lambda))
return(z)
}
Pl <- rep(0, length(lambda_iii))
for (i in 1:length(lambda_iii)) {
Pl[i] = Pl_lambda_function(lambda_iii[i], caterpillars)
}
plot(lambda_iii, Pl, type = "l")
# Pl
#set.seed(4321^2)
#fit1 <- optim(2, Pl_lambda_function, method = "Brent", lower = 2, upper = 50, data = caterpillars)
#fit1
Pl
lambda_iii <- seq(2, 100, length = 2000)
# nlam <- length(lambda)
Pl_lambda_function <- function(lambda, data) {
z <- sum(lfactorial(data + lambda - 1))
- sum(lfactorial(data))
- sum(lfactorial(lambda - 1))
#       + log(1 - lambda / (mean(data) + lambda)) * length(data) * mean(data)
#       + length(data) * lambda * log(lambda)
#       - length(data) * lambda * log(lambda * mean(data))
+ log(1 - lambda / (mean(data)) + lambda) * sum(data)
+ length(data) * lambda * log(lambda / (mean(data) + lambda))
return(z)
}
Pl <- rep(0, length(lambda_iii))
for (i in 1:length(lambda_iii)) {
Pl[i] = Pl_lambda_function(lambda_iii[i], caterpillars)
}
plot(lambda_iii, Pl, type = "l")
# Pl
#set.seed(4321^2)
#fit1 <- optim(2, Pl_lambda_function, method = "Brent", lower = 2, upper = 50, data = caterpillars)
#fit1
lambda_iii <- seq(2, 50, length = 2000)
# nlam <- length(lambda)
Pl_lambda_function <- function(lambda, data) {
z <- sum(lfactorial(data + lambda - 1))
- sum(lfactorial(data))
- sum(lfactorial(lambda - 1))
#       + log(1 - lambda / (mean(data) + lambda)) * length(data) * mean(data)
#       + length(data) * lambda * log(lambda)
#       - length(data) * lambda * log(lambda * mean(data))
+ log(1 - lambda / (mean(data)) + lambda) * sum(data)
+ length(data) * lambda * log(lambda / (mean(data) + lambda))
return(z)
}
Pl <- rep(0, length(lambda_iii))
for (i in 1:length(lambda_iii)) {
Pl[i] = Pl_lambda_function(lambda_iii[i], caterpillars)
}
plot(lambda_iii, Pl, type = "l")
# Pl
#set.seed(4321^2)
#fit1 <- optim(2, Pl_lambda_function, method = "Brent", lower = 2, upper = 50, data = caterpillars)
#fit1
library(tidyverse)
setwd("~/R/MATH551/Quiz/Quiz2/")
load("M551Quiz2018.Rdata")
uniform.loglik <- function(para, data) {
# para[1] = lambda
# para[2] = p
z <- sum(
lfactorial(data + para[1] - 1)
- lfactorial(data)
- lfactorial(para[1] - 1)
+ data * log(1 - para[2])
+ para[1] * log(para[2]))
return(z)
}
para_i_1 <- c(4, 0.25)
para_i_2 <- c(3, 0.5)
uniform.loglik(para_i_1, caterpillars)
uniform.loglik(para_i_2, caterpillars)
lambda_ii <- 3
p_ii <- (length(caterpillars) * lambda_ii) / (sum(caterpillars) + length(caterpillars) * lambda_ii)
print(p_ii)
length(caterpillars)
lambda_iii <- seq(2, 50, length = 2000)
# nlam <- length(lambda)
Pl_lambda_function <- function(lambda, data) {
z <- sum(lfactorial(data + lambda - 1))
- sum(lfactorial(data))
- 200 * lfactorial(lambda - 1)
+ 200 * (1.31 + lambda) * log(1.31 / (1.31 + lambda))
return(z)
}
Pl <- rep(0, length(lambda_iii))
for (i in 1:length(lambda_iii)) {
Pl[i] = Pl_lambda_function(lambda_iii[i], caterpillars)
}
plot(lambda_iii, Pl, type = "l")
# Pl
#set.seed(4321^2)
#fit1 <- optim(2, Pl_lambda_function, method = "Brent", lower = 2, upper = 50, data = caterpillars)
#fit1
Pl_lambda_function(4, caterpillars)
n <- length(river)
river <- c(50.4, 49.7, 49.9, 51.1, 49.2, 53.4, 51.1, 49.9, 51.3, 49.6)
ll_river <- function(theta, datavec) {
n=length(datavec)
s1=sum(datavec)
s2=sum(exp(-datavec))
return(n*theta-s1-exp(theta)*s2)
}
ll_river(48, river)
n <- length(river)
s2 <- sum(exp(-river))
muhat = -log(s2 / n)
print(muhat)
IObs <- exp(muhat) * s2
print(IObs)
W = (muhat - 50) / sqrt(0.1)
print(W)
p = 1 - pnorm(W)
print(p)
u_river <- function(theta, datavec) {
n = length(datavec)
s2 = sum(exp(-datavec))
return(n - exp(theta) * s2)
}
u <- u_river(50, river)
u
u^2/10
u / sqrt(10)
1 - pchisq(u^2/10, df=1)
river <- c(50.4, 49.7, 49.9, 51.1, 49.2, 53.4, 51.1, 49.9, 51.3, 49.6)
ll_river <- function(theta, datavec) {
n=length(datavec)
s1=sum(datavec)
s2=sum(exp(-datavec))
return(n*theta-s1-exp(theta)*s2)
}
ll_river(48, river)
n <- length(river)
s2 <- sum(exp(-river))
muhat = -log(s2 / n)
print(muhat)
library(tidyverse)
setwd("~/R/MATH551/Quiz/Quiz2/")
load("M551Quiz2018.Rdata")
uniform.loglik <- function(para, data) {
# para[1] = lambda
# para[2] = p
z <- sum(
lfactorial(data + para[1] - 1)
- lfactorial(data)
- lfactorial(para[1] - 1)
+ data * log(1 - para[2])
+ para[1] * log(para[2]))
return(z)
}
para_i_1 <- c(4, 0.25)
para_i_2 <- c(3, 0.5)
uniform.loglik(para_i_1, caterpillars)
uniform.loglik(para_i_2, caterpillars)
lambda_ii <- 3
p_ii <- (length(caterpillars) * lambda_ii) / (sum(caterpillars) + length(caterpillars) * lambda_ii)
print(p_ii)
lambda_iii <- seq(2, 50, length = 2000)
# nlam <- length(lambda)
Pl_lambda_function <- function(lambda, data) {
z <- sum(lfactorial(data + lambda - 1))
- sum(lfactorial(data))
- 200 * lfactorial(lambda - 1)
+ 200 * (1.31 + lambda) * log(1.31 / (1.31 + lambda))
return(z)
}
Pl <- rep(0, length(lambda_iii))
for (i in 1:length(lambda_iii)) {
Pl[i] = Pl_lambda_function(lambda_iii[i], caterpillars)
}
plot(lambda_iii, Pl, type = "l")
# Pl
#set.seed(4321^2)
#fit1 <- optim(2, Pl_lambda_function, method = "Brent", lower = 2, upper = 50, data = caterpillars)
#fit1
sapply(lambda_iii, Pl_lambda_function, data = caterpillars)
lambda_iii <- seq(2, 50, length = 2000)
# nlam <- length(lambda)
Pl_lambda_function <- function(lambda, data) {
z <- sum(lfactorial(data + lambda - 1))
- sum(lfactorial(data))
- 200 * lfactorial(lambda - 1)
+ 200 * (1.31 + lambda) * log(1.31 / (1.31 + lambda))
return(z)
}
Pl <- sapply(lambda_iii, Pl_lambda_function, data = caterpillars)
plot(lambda_iii, Pl, type = "l")
# Pl
#set.seed(4321^2)
#fit1 <- optim(2, Pl_lambda_function, method = "Brent", lower = 2, upper = 50, data = caterpillars)
#fit1
Pl
apply(lambda_iii, Pl_lambda_function, data = caterpillars)
help(apply)
lambda_iii <- seq(2, 50, length = 2000)
# nlam <- length(lambda)
Pl_lambda_function <- function(lambda, data) {
z <- sum(lfactorial(data + lambda - 1))
- sum(lfactorial(data))
- 200 * lfactorial(lambda - 1)
+ 200 * (1.31 + lambda) * log(1.31 / (1.31 + lambda))
return(z)
}
Pl <- sapply(lambda_iii, Pl_lambda_function, data = caterpillars)
plot(lambda_iii, Pl, type = "l")
print(Pl)
#set.seed(4321^2)
#fit1 <- optim(2, Pl_lambda_function, method = "Brent", lower = 2, upper = 50, data = caterpillars)
#fit1
lambda_iii <- seq(2, 50, length = 2000)
# nlam <- length(lambda)
Pl_lambda_function <- function(lambda, data) {
z <- sum(lfactorial(data + lambda - 1))
- sum(lfactorial(data))
- 200 * lfactorial(lambda - 1)
+ 200 * (1.31 + lambda) * log(1.31 / (1.31 + lambda))
return(z)
}
Pl <- sapply(lambda_iii, Pl_lambda_function, data = caterpillars)
plot(lambda_iii, Pl, type = "l")
Pl
#set.seed(4321^2)
#fit1 <- optim(2, Pl_lambda_function, method = "Brent", lower = 2, upper = 50, data = caterpillars)
#fit1
library(tidyverse)
setwd("~/R/MATH552/lab2/")
load("../datasets/M551Quiz2018.Rdata")
library(tidyverse)
setwd("~/R/MATH552/lab2/")
load("../datasets/M551Quiz2018.Rdata")
dwaine <- read.table("../datasets/dwaine.dat")
names(dwaine) <- c("npeople","income","sales")
head(dwaine)
attach(dwaine)
out=lm(sales~npeople+income)
dwaine <- read.table("../datasets/dwaine.dat")
names(dwaine) <- c("npeople","income","sales")
head(dwaine)
attach(dwaine)
out=lm(sales~npeople+income)
library(tidyverse)
setwd("~/R/MATH552/lab2/")
dwaine <- read.table("../datasets/dwaine.dat")
names(dwaine) <- c("npeople","income","sales")
head(dwaine)
attach(dwaine)
out=lm(sales~npeople+income)
dwaine <- read.table("../datasets/dwaine.dat")
names(dwaine) <- c("npeople","income","sales")
head(dwaine)
attach(dwaine)
out=lm(sales~npeople+income)
out$fitted.values
out$residuals
dwaine <- read.table("../datasets/dwaine.dat")
names(dwaine) <- c("npeople","income","sales")
head(dwaine)
attach(dwaine)
out=lm(sales~npeople+income)
out$fitted.values
out$residuals
plot(out)
dwaine <- read.table("../datasets/dwaine.dat")
names(dwaine) <- c("npeople","income","sales")
head(dwaine)
attach(dwaine)
out <- lm(sales~npeople+income)
# out$fitted.values
# out$residuals
plot(out)
dwaine <- read.table("../datasets/dwaine.dat")
names(dwaine) <- c("npeople","income","sales")
# head(dwaine)
attach(dwaine)
out <- lm(sales~npeople+income)
# out$fitted.values
# out$residuals
plot(out)
standardresid= rstandard(out)
plot(out$fitted, standardresid)
influence.measures()
influence.measures(out)
influence.measures(out)
dfbetas(out)
dffits(out)
birthweight <- read.table("../datasets/birthweight.dat") birthweight
birthweight <- read.table("../datasets/birthweight.dat")
birthweight
attach(birthweight)
plot(age,weight)
bwfit <- lm(weight ~age) abline(bwfit)
birthweight <- read.table("../datasets/birthweight.dat")
birthweight
attach(birthweight)
plot(age,weight)
bwfit <- lm(weight ~age)
abline(bwfit)
birthweight <- read.table("../datasets/birthweight.dat")
birthweight
attach(birthweight)
plot(age,weight)
bwfit <- lm(weight ~age)
abline(bwfit)
summary(bwfit)
t.test(age ~ sex, var.equal=TRUE)
t.test(age ~ sex, var.equal=TRUE)
bwfit2 <- lm(weight ~ sex)
summary(bwfit2)
t.test(weight ~ sex, var.equal=TRUE)
bwfit3 <- lm(weight ~ age + sex)
anova(bwfit,bwfit3)
bwfit4 <- lm(weight ~ age * sex)
bwfit4a <- lm(weight ~ age + sex + age:sex)
bwfit4
bwfit4a
bwfit4 <- lm(weight ~ age * sex)
bwfit4a <- lm(weight ~ age + sex + age:sex)
summary(bwfit4)
summary(bwfit4a)
anova(bwfit4, bwfit4a)
